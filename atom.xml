<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学到的越多，越是能发现自己有多么渺小。</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yefangqingchen.com/"/>
  <updated>2017-03-20T10:00:31.000Z</updated>
  <id>http://www.yefangqingchen.com/</id>
  
  <author>
    <name>yefangqingchen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RxJava 学习笔记</title>
    <link href="http://www.yefangqingchen.com/2017/03/20/RxJava-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.yefangqingchen.com/2017/03/20/RxJava-学习笔记/</id>
    <published>2017-03-20T09:58:05.000Z</published>
    <updated>2017-03-20T10:00:31.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>大概就是说RxJava是Java VM上一个灵活的、使用可观测序列来组成的一个异步的、基于事件的库。
Observables可以发出一系列的 事件，这里的事件可以是任何东西，例如网络请求、复杂计算处理、数据库操作、文件操作等等，事件执行结束后交给 Observer/Subscriber 的回调处理。
</code></pre><hr>
<a id="more"></a>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote>
<p> View 是 被观察者（Observable/Subscriber）， OnClickListener 是 观察者（Observer），setOnClickListener() 是 Subscrib。</p>
</blockquote>
<table class="table table-bordered table-striped table-condensed"><br>    <tr><br>        <td>Observer/Subscriber</td><br>        <td>观察者</td><br>        <td>事件的消费者</td><br>    </tr><br>    <tr><br>        <td>Observable</td><br>        <td>被观察者</td><br>        <td>事件的产生者</td><br>    </tr><br>    <tr><br>        <td>Subscrib</td><br>        <td>订阅者</td><br>        <td>用于关联消费者和生产者</td><br>    </tr><br>    <tr><br>        <td>事件</td><br>    </tr><br></table>

<p><img src="http://omsqy2wls.bkt.clouddn.com/WechatIMG2.jpeg" alt="此处输入图片的描述"></p>
<table class="table table-bordered table-striped table-condensed"><br>    <tr><br>        <td>onNext()</td><br>        <td>Observable调用这个方法发送数据，Observer中接受数据</td><br>    </tr><br>    <tr><br>        <td>onCompleted()</td><br>        <td>事件队列完结触发,队列自动终止不在执行其他方法</td><br>    </tr><br>    <tr><br>        <td>onError()</td><br>        <td>在事件处理过程中出异常时触发，队列自动终止不在执行其他方法</td><br>    </tr><br>    <tr><br>        <td>注意</td><br>        <td>onCompleted()和onError()在队列中调用了其中一个，就不应该再调用另一个。</td><br>    </tr><br></table>

<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*******************观察者***************************/</span></div><div class="line"></div><div class="line"><span class="comment">//观察者1</span></div><div class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onComplete: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onError: "</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onNext: "</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//观察者2</span></div><div class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">         <span class="comment">//onStart(): 这是 Subscriber 增加的方法,这是一个可选方法，默认情况下它的实现为空</span></div><div class="line">          <span class="comment">//它会在 subscribe 刚开始，而事件还未发送之前被调用</span></div><div class="line">     &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onComplete: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onError: "</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onNext: "</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/*********************被观察者***********************/</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  写法一</div><div class="line">     *      执行结果：</div><div class="line">     *          onNext: 1</div><div class="line">     *          onNext: 2</div><div class="line">     *          onNext: 3</div><div class="line">     *          onComplete:</div><div class="line">     */</div><div class="line">Observable&lt;String&gt; observable1 = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">        subscriber.onNext(<span class="string">"1"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"2"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"3"</span>);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">observable1.subscribe(observer);</div><div class="line"></div><div class="line"></div><div class="line">----------------------------------------------------------------</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  写法二</div><div class="line">     *      执行结果：</div><div class="line">     *          onNext: 1</div><div class="line">     *          onNext: 2</div><div class="line">     *          onNext: 3</div><div class="line">     *          onComplete:</div><div class="line">     */</div><div class="line">Observable observable2 = Observable.just(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>);</div><div class="line">observable2.subscribe(observer);</div><div class="line"></div><div class="line">----------------------------------------------------------------</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  写法三</div><div class="line">     *      执行结果：</div><div class="line">     *          onNext: 1</div><div class="line">     *          onNext: 2</div><div class="line">     *          onNext: 3</div><div class="line">     *          onComplete:</div><div class="line">     */</div><div class="line">String[] words = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</div><div class="line">Observable observable3 = Observable.from(words);</div><div class="line">observable3.subscribe(observer);</div><div class="line">----------------------------------------------------------------</div><div class="line"></div><div class="line">    <span class="comment">/********************************简易写法**************************************/</span></div><div class="line"></div><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">    .subscribeOn(Schedulers.io()) <span class="comment">// 指定 subscribe() 发生在 IO 线程</span></div><div class="line">    .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 指定 Subscriber 的回调发生在主线程</span></div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**************打印数组或List集合*******************/</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  执行结果：</div><div class="line">     *      onNext: 1</div><div class="line">     *      onNext: 2</div><div class="line">     *      onNext: 3</div><div class="line">     */</div><div class="line">Integer [] ints = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</div><div class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">list.add(<span class="number">1</span>);</div><div class="line">list.add(<span class="number">2</span>);</div><div class="line">list.add(<span class="number">3</span>);</div><div class="line"></div><div class="line">Observable.from(ints)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer i)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"onNext: "</span> + i);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**************从本地取图片在显示*******************/</span></div><div class="line">Observable.just(<span class="string">"images/logo.png"</span>) <span class="comment">// 输入类型 String</span></div><div class="line">    .map(<span class="keyword">new</span> Func1&lt;String, Bitmap&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(String filePath)</span> </span>&#123; <span class="comment">// 参数类型 String</span></div><div class="line">            <span class="keyword">return</span> getBitmapFromPath(filePath); <span class="comment">// 返回类型 Bitmap</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123; <span class="comment">// 参数类型 Bitmap</span></div><div class="line">            showBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h3><ul>
<li>subscribeOn(): 指定 subscribe() 所发生的线程</li>
<li>observeOn(): 指定 Subscriber 所运行在的线程</li>
</ul>
<table class="table table-bordered table-striped table-condensed"><br>    <tr><br>        <td>Schedulers.immediate()</td><br>        <td>直接在当前线程运行，默认的</td><br>    </tr><br>    <tr><br>        <td>Schedulers.newThread()</td><br>        <td>总是启用新线程，并在新线程执行操作</td><br>    </tr><br>    <tr><br>        <td>Schedulers.io()</td><br>        <td>I/O 操作（读写文件、读写数据库、网络信息交互等），无数量上限，可重用空闲线程</td><br>    </tr><br>    <tr><br>        <td>AndroidSchedulers.mainThread()</td><br>        <td>在 Android 主线程运行</td><br>    </tr><br></table>


<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**************从本地取图片在显示*******************/</span></div><div class="line">Observable.create(<span class="keyword">new</span> OnSubscribe&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Drawable&gt; subscriber)</span> </span>&#123;</div><div class="line">        Drawable drawable = getTheme().getDrawable(drawableRes));</div><div class="line">        subscriber.onNext(drawable);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">.subscribeOn(Schedulers.io()) <span class="comment">// 指定 subscribe() 发生在 IO 线程</span></div><div class="line">.observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 指定 Subscriber 的回调发生在主线程</span></div><div class="line">.subscribe(<span class="keyword">new</span> Observer&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">        imageView.setImageDrawable(drawable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>参考链接</p>
</blockquote>
<p><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">http://gank.io/post/560e15be2dca930e00da1083</a></p>
<h2 id="http-blog-csdn-net-yyh352091626-article-details-53304728"><a href="#http-blog-csdn-net-yyh352091626-article-details-53304728" class="headerlink" title="http://blog.csdn.net/yyh352091626/article/details/53304728"></a><a href="http://blog.csdn.net/yyh352091626/article/details/53304728" target="_blank" rel="external">http://blog.csdn.net/yyh352091626/article/details/53304728</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;大概就是说RxJava是Java VM上一个灵活的、使用可观测序列来组成的一个异步的、基于事件的库。
Observables可以发出一系列的 事件，这里的事件可以是任何东西，例如网络请求、复杂计算处理、数据库操作、文件操作等等，事件执行结束后交给 Observer/Subscriber 的回调处理。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.yefangqingchen.com/categories/Android/"/>
    
      <category term="RxJava" scheme="http://www.yefangqingchen.com/categories/Android/RxJava/"/>
    
    
      <category term="Android" scheme="http://www.yefangqingchen.com/tags/Android/"/>
    
      <category term="RxJava" scheme="http://www.yefangqingchen.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android 配置以及使用 Protobuf</title>
    <link href="http://www.yefangqingchen.com/2017/03/14/Android-%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8-Protobuf/"/>
    <id>http://www.yefangqingchen.com/2017/03/14/Android-配置以及使用-Protobuf/</id>
    <published>2017-03-14T10:32:31.000Z</published>
    <updated>2017-03-14T10:42:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>因为最近公司要求在新的APP版本上和后台通信使用protobuf，因为我之前也没有听说过这是啥，所以在使用的过程中也记录一下使用的过程。<br>至于Protobuf是什么有什么优点缺点就不写了，google一下一大堆。这里记一下笔记。</p>
</blockquote>
<h2 id="Protobuf-配置"><a href="#Protobuf-配置" class="headerlink" title="Protobuf 配置"></a>Protobuf 配置</h2><blockquote>
<p>现在Android开发基本都是用 Android Studio 开始，所以我们只需要在Android Studio里面配置下就可以使用了。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-打开project的build-gradle文件"><a href="#1-打开project的build-gradle文件" class="headerlink" title="1. 打开project的build.gradle文件"></a>1. 打开project的build.gradle文件</h2><p><img src="http://omsqy2wls.bkt.clouddn.com/blog_protobuf_1.jpeg" alt="此处输入图片的描述"></p>
<blockquote>
<p>添加代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        mavenCentral()<span class="comment">//添加此行</span></div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.2.3'</span></div><div class="line">        classpath <span class="string">'com.google.protobuf:protobuf-gradle-plugin:0.8.0'</span><span class="comment">//添加此行</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-打开在app的build-gradle中配置"><a href="#2-打开在app的build-gradle中配置" class="headerlink" title="2. 打开在app的build.gradle中配置"></a>2. 打开在app的build.gradle中配置</h2><p><img src="http://omsqy2wls.bkt.clouddn.com/WechatIMG5.jpeg" alt="此处输入图片的描述"></p>
<blockquote>
<p>添加代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'com.google.protobuf'</span><span class="comment">//添加此行</span></div><div class="line"></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">25</span></div><div class="line">    buildToolsVersion <span class="string">"25.0.2"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"rock.example.com"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">25</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    dataBinding &#123;</div><div class="line">        enabled = <span class="keyword">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//添加此段</span></div><div class="line">protobuf &#123;</div><div class="line">    <span class="comment">//配置protoc编译器</span></div><div class="line">    protoc &#123;</div><div class="line">        artifact = <span class="string">'com.google.protobuf:protoc:3.0.0-alpha-3'</span></div><div class="line">    &#125;</div><div class="line">    plugins &#123;</div><div class="line">        javalite &#123;</div><div class="line">            artifact = <span class="string">'com.google.protobuf:protoc-gen-javalite:3.0.0'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//这里配置生成目录，编译后会在build的目录下生成对应的java文件</span></div><div class="line">    generateProtoTasks &#123;</div><div class="line">        all().each &#123; task -&gt;</div><div class="line">            task.plugins &#123;</div><div class="line">                javalite &#123;&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>,</span></span></div><div class="line">            include: [<span class="string">'*.jar'</span>])</div><div class="line">    <span class="title">androidTestCompile</span><span class="params">(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></div><div class="line">        exclude group: <span class="string">'com.android.support'</span>, <span class="keyword">module</span>: <span class="string">'support-annotations'</span></div><div class="line">    &#125;)</div><div class="line">    compile 'com.android.support:appcompat-v7:25.2.0'</div><div class="line">    compile 'com.android.support:design:25.2.0'</div><div class="line">    testCompile 'junit:junit:4.12'</div><div class="line">    compile 'com.google.protobuf:protobuf-lite:3.0.0'<span class="comment">//添加此行</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-app-main目录下创建proto目录，存放-proto文件"><a href="#3-app-main目录下创建proto目录，存放-proto文件" class="headerlink" title="3. app/main目录下创建proto目录，存放.proto文件"></a>3. app/main目录下创建proto目录，存放.proto文件</h2><p><img src="http://omsqy2wls.bkt.clouddn.com/WechatIMG6.jpeg" alt="此处输入图片的描述"></p>
<blockquote>
<p>创建.proto文件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//proto的版本</span></div><div class="line">syntax = <span class="string">"proto3"</span>;</div><div class="line"></div><div class="line"><span class="comment">//如果设置生成的Java文件也将会自动存放到指定输出目录下的rock.example.com.model目录中。</span></div><div class="line"><span class="comment">//如果没有设置，Java的包名则为package关键字指定的名称</span></div><div class="line">option java_package = <span class="string">"rock.example.com.model"</span>;</div><div class="line"><span class="comment">//如果设置生成的java文件名为UserProto，如果没有设置默认名为.proto文件名</span></div><div class="line">option java_outer_classname = <span class="string">"UserProto"</span>;</div><div class="line"></div><div class="line">message UserData&#123;</div><div class="line">	int64 id = <span class="number">1</span>;</div><div class="line">	string name = <span class="number">2</span>;</div><div class="line">	string msg = <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-生成对应文件"><a href="#4-生成对应文件" class="headerlink" title="4. 生成对应文件"></a>4. 生成对应文件</h2><ol>
<li>Build - &gt; Clean Project</li>
<li>Build - &gt; Rebulid Project</li>
</ol>
<blockquote>
<p> 构建完了之后可以在工程的 app/build/generated/source/proto/debug/javalite/中找到UserProto</p>
</blockquote>
<p><img src="http://omsqy2wls.bkt.clouddn.com/blog_protobuf_4.jpeg" alt="此处输入图片的描述"></p>
<h2 id="5-请求网络填充UserProto并使用"><a href="#5-请求网络填充UserProto并使用" class="headerlink" title="5. 请求网络填充UserProto并使用"></a>5. 请求网络填充UserProto并使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">liteHttp.execute(<span class="keyword">new</span> ByteString(url).setHttpListener(<span class="keyword">new</span> HttpListener&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(ByteString data, Response&lt;ByteString&gt; response)</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        UserProto.UserData userProto = UserProto.UserData.parseFrom(data);</div><div class="line"></div><div class="line">        System.out.println(userProto.getName());</div><div class="line">        System.out.println(userProto.getMsg());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">));</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>参考链接</p>
</blockquote>
<p><a href="https://taozj.org/201609/learn-note-of-protobuf.html" target="_blank" rel="external">https://taozj.org/201609/learn-note-of-protobuf.html</a><br><a href="https://github.com/google/protobuf" target="_blank" rel="external">https://github.com/google/protobuf</a><br><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;因为最近公司要求在新的APP版本上和后台通信使用protobuf，因为我之前也没有听说过这是啥，所以在使用的过程中也记录一下使用的过程。&lt;br&gt;至于Protobuf是什么有什么优点缺点就不写了，google一下一大堆。这里记一下笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Protobuf-配置&quot;&gt;&lt;a href=&quot;#Protobuf-配置&quot; class=&quot;headerlink&quot; title=&quot;Protobuf 配置&quot;&gt;&lt;/a&gt;Protobuf 配置&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;现在Android开发基本都是用 Android Studio 开始，所以我们只需要在Android Studio里面配置下就可以使用了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.yefangqingchen.com/categories/Android/"/>
    
      <category term="Android Studio" scheme="http://www.yefangqingchen.com/categories/Android/Android-Studio/"/>
    
      <category term="Protobuf" scheme="http://www.yefangqingchen.com/categories/Android/Android-Studio/Protobuf/"/>
    
    
      <category term="Android" scheme="http://www.yefangqingchen.com/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://www.yefangqingchen.com/tags/Android-Studio/"/>
    
      <category term="Protobuf" scheme="http://www.yefangqingchen.com/tags/Protobuf/"/>
    
  </entry>
  
  <entry>
    <title>为什么现在才选择写博客</title>
    <link href="http://www.yefangqingchen.com/2017/03/08/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%8E%B0%E5%9C%A8%E6%89%8D%E9%80%89%E6%8B%A9%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.yefangqingchen.com/2017/03/08/为什么现在才选择写博客/</id>
    <published>2017-03-08T08:24:13.000Z</published>
    <updated>2017-03-08T10:07:32.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>追随前辈们的脚步，工作几年的我也开始决定写博客。很早就萌发了要自己搭建站点写博客的想法，记录下生活、总结下技术难点等等，但是因为自己的拖延症、怕麻烦就拖到了现在。还有就是因为自己觉得自己一直没有从始到终都是自己写的开源项目、或者控件工具之类的。不想把别人的东西复制过来改改，然后在上传到自己的github。我觉得这样没什么意思。</p>
<p>但是为什么现在又决定开始写呢 ？ </p>
<a id="more"></a>
<p>因为工作几年后开始发现自己的技术增长的太慢，发现遇到了瓶颈，仿佛又回到了几年前的状态变得迷茫不知道该怎么办。</p>
<p>作为从事IT行业的我来说，生活在这个节奏快、人心浮躁、知识日月更新的城市和时代只有每天让自己忙碌和进步才能让自己感到不心慌、不被淘汰。所以现在我才决定要开始写博客。</p>
<p>现在打算重新把基础书籍复习一次，把以往和现在再工作中学到的知识、难点记录起来。然后在自己慢慢做一个开源的项目。</p>
<p>并且写博客确实有很多好处：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>让自己变得更加自信，让自己变的冷静下来</li>
<li>发布日记，杂文，呈现所想，将其暴露在外，这能让错误和正确都更加明显，以便改正和巩固，帮助自己很好的认识自己。</li>
</ul>
</blockquote>
<p>感想</p>
<blockquote>
<ul>
<li>知道的越多懂得越多，越是能能发现自己有多么渺小和无知。多去听听别人的声音，可以知道人外有人，山外有山，也能衡量自己的实力。不妄自菲薄，也不骄傲自满。保持学习，努力，坚持。</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;追随前辈们的脚步，工作几年的我也开始决定写博客。很早就萌发了要自己搭建站点写博客的想法，记录下生活、总结下技术难点等等，但是因为自己的拖延症、怕麻烦就拖到了现在。还有就是因为自己觉得自己一直没有从始到终都是自己写的开源项目、或者控件工具之类的。不想把别人的东西复制过来改改，然后在上传到自己的github。我觉得这样没什么意思。&lt;/p&gt;
&lt;p&gt;但是为什么现在又决定开始写呢 ？ &lt;/p&gt;
    
    </summary>
    
      <category term="心情杂记" scheme="http://www.yefangqingchen.com/categories/%E5%BF%83%E6%83%85%E6%9D%82%E8%AE%B0/"/>
    
      <category term="其他" scheme="http://www.yefangqingchen.com/categories/%E5%BF%83%E6%83%85%E6%9D%82%E8%AE%B0/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://www.yefangqingchen.com/tags/%E5%85%B6%E4%BB%96/"/>
    
      <category term="心情杂记" scheme="http://www.yefangqingchen.com/tags/%E5%BF%83%E6%83%85%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.yefangqingchen.com/2017/03/07/hello-world/"/>
    <id>http://www.yefangqingchen.com/2017/03/07/hello-world/</id>
    <published>2017-03-07T01:52:38.000Z</published>
    <updated>2017-03-08T10:07:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://www.yefangqingchen.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://www.yefangqingchen.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
