<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学到的越多，越是能发现自己有多么渺小。</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yefangqingchen.com/"/>
  <updated>2017-04-06T08:21:38.000Z</updated>
  <id>http://www.yefangqingchen.com/</id>
  
  <author>
    <name>yefangqingchen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pinme 开发教训</title>
    <link href="http://www.yefangqingchen.com/2017/04/06/Pinme-%E5%BC%80%E5%8F%91%E6%95%99%E8%AE%AD/"/>
    <id>http://www.yefangqingchen.com/2017/04/06/Pinme-开发教训/</id>
    <published>2017-04-06T08:18:36.000Z</published>
    <updated>2017-04-06T08:21:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、制作.9格式图片选最小图，否则默认大小撑大控件。<br>2、如果将一个对象的属性设置为static，那么就算对象实例被回收了，该属性也存在内存，生命周期为app的生命周期。<br>3、从本地读取图片OOM，使用前压缩<br>5、强转类型之前先先确定对象不为空。<br>6、全部Activity可继承自BaseActivity，便于统一风格与处理公共事件，构建对话框统一构建器的建立，万一需要整体变动，一处修改到处有效。<br>7、全局变量放全局类中，模块私有放自己的管理类中，让常量清晰且集中.<br>8、如果数据没有必要加载，数据请务必延迟初始化，谨记为用户节省内存，总不会有坏处。<br>9、异常抛出，在合适的位置处理或者集中处理，不要搞的到处是catch，混乱且性能低，尽量不要在循环体中捕获异常，以提升性能。<br>10、轮询时保持只有一条请求，不然会有问题<br>11、轮询得到消息时，使用数据库使用单例要加锁，不然数据插入会有问题。<br>12、轮询使用Rxjava或者Eventbus代替BroadcastReceiver<br>13、不要在Application中初始化太多操作<br>14、保证Application的onCreate只执行了一次，如果在onCreate中初始化一些必要组件重复执行onCreate会有问题<br>15、IM使用数据库，单例时，APP退出，或者切换账号，要把所有单例设置为null<br>16、Activity销毁时，主动释放资源，暂停网络请求<br>17、自定义View，View onMeasure之后，width不一定有值，如果设置了LayoutParagrams那么view.getLayoutParams().width将有设定值。<br>18、使用LiteOrm 数据库删除数据时，要注意级联操作避免出现永远删不掉的脏数据<br>19、当List中保存大量数据时，最好保存在本地，不要使用static修饰<br>20、如果从后台传入过来的Json过于复杂和庞大的话考虑使用Protobuf<br>21、上传大图或者大文件尽量使用IntentService<br>22、请求带有时间戳请注意，yy-MM-dd hh:mm:ss是12小时制格式。yy-MM-dd HH:mm:ss是24小时制格式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、制作.9格式图片选最小图，否则默认大小撑大控件。&lt;br&gt;2、如果将一个对象的属性设置为static，那么就算对象实例被回收了，该属性也存在内存，生命周期为app的生命周期。&lt;br&gt;3、从本地读取图片OOM，使用前压缩&lt;br&gt;5、强转类型之前先先确定对象不为空。&lt;br&gt;6
    
    </summary>
    
      <category term="项目总结" scheme="http://www.yefangqingchen.com/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="项目总结" scheme="http://www.yefangqingchen.com/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Android 内存优化</title>
    <link href="http://www.yefangqingchen.com/2017/04/06/Android-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    <id>http://www.yefangqingchen.com/2017/04/06/Android-内存优化/</id>
    <published>2017-04-06T07:53:09.000Z</published>
    <updated>2017-04-06T08:26:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android系统中内存有两个概念，一个是物理内存和进程内存。</p>
<p>物理内存即移动设备上的RAM，当启动一个Android程序时，会启动一个Dalvik VM进程，系统会给它分配固定的内存空间（16M,32M不定），这块内存空间会映射到RAM上某个区域。然后这个Android程序就会运行在这块空间上。Java里会将这块空间分成Stack栈内存和Heap堆内存。stack（栈区）里存放对象的引用，heap(堆区)里存放实际对象数据。</p>
<p>在程序运行中会创建对象，如果未合理管理内存，比如不及时回收无效空间就会造成内存泄露，严重的话可能导致使用内存超过系统分配内存，即内存溢出OOM，导致程序卡顿甚至直接退出。<br>其实很多方面都会导致内存紧张：<br>1、图片问题<br>2、资源释放问题<br>4、代码层次的优化</p>
<a id="more"></a>
<h2 id="关于图片"><a href="#关于图片" class="headerlink" title="关于图片"></a>关于图片</h2><h3 id="网络图片"><a href="#网络图片" class="headerlink" title="网络图片"></a>网络图片</h3><p>android默认颜色模式为ARGB_8888，显示质量最高，占用内存最大。若要求不高时可采用RGB_565等模式。图片大小：图片长度x宽度x单位像素所占据字节数</p>
<table>
<thead>
<tr>
<th>android色彩模式说明</th>
<th>占用空间</th>
</tr>
</thead>
<tbody>
<tr>
<td>ALPHA_8</td>
<td>每个像素占用1byte内存</td>
<td></td>
</tr>
<tr>
<td>ARGB_4444</td>
<td>每个像素占用2byte内存</td>
<td></td>
</tr>
<tr>
<td>ARGB_8888（默认）</td>
<td>每个像素占用4byte内存</td>
<td></td>
</tr>
<tr>
<td>RGB_565</td>
<td>每个像素占用2byte内存</td>
<td></td>
</tr>
</tbody>
</table>
<p>现在很多第三方图片下载库，已经有了很多针对图片下载解码方式和图片的缓存方式。</p>
<p><a href="https://github.com/bumptech/glide" target="_blank" rel="external">官网出品的Glide</a><br>Glide 完全是基于 Picasso 的，沿袭了 Picasso的简洁风格，但是在此做了大量优化与改进。</p>
<p>Glide 默认的 Bitmap 格式是 RGB_565 格式，而 Picasso 默认的是 ARGB_8888 格式，这个内存开销要小一半。</p>
<p>在磁盘缓存方面，Picasso 只会缓存原始尺寸的图片，而 Glide 缓存的是多种规格，也就意味着 Glide 会根据你 ImageView 的大小来缓存相应大小的图片尺寸，比如你 ImageView 大小是200<em>200，原图是 400</em>400 ，而使用 Glide 就会缓存 200<em>200 规格的图，而 Picasso 只会缓存 400</em>400 规格的。这个改进就会导致 Glide 比 Picasso 加载的速度要快，毕竟少了每次裁剪重新渲染的过程。<br>最重要的一个特性是 Glide 支持加载 Gif 动态图，而 Picasso 不支持该特性。除此之外，还有很多其他配置选项的增加。</p>
<p><a href="https://github.com/facebook/fresco" target="_blank" rel="external">Facebook出品的Fresco</a><br>Fresco 是 Facebook 出品，他是新一代的图片加载库，我们知道 Android 应用程序可用的内存有限，经常会因为图片加载导致 OOM，虽然我们有各种手段去优化，尽量减少出现 OOM 的可能性，但是永远没法避免，尤其某些低端手机 OOM 更是严重。而 Facebook 就另辟蹊径，既然没法在 Java 层处理，我们就在更底层的 Native 堆做手脚。于是 Fresco 将图片放到一个特别的内存区域叫 Ashmem 区，就是属于 Native 堆，图片将不再占用 App 的内存，Java 层对此无能为力，这里是属于 C++ 的地盘，所以能大大的减少 OOM。</p>
<p><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">老牌框架Universal-Image-Loader</a><br>我使用的第一个图片加载框架，不过已经停止维护了。</p>
<h3 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h3><table>
<thead>
<tr>
<th>dpi</th>
<th>分辨率</th>
<th>res</th>
<th>Density密度</th>
</tr>
</thead>
<tbody>
<tr>
<td>160dpi</td>
<td>320*533</td>
<td>mdpi</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>240dpi</td>
<td>480*800</td>
<td>hdpi</td>
<td>1.5</td>
<td></td>
</tr>
<tr>
<td>320dpi</td>
<td>720*1280</td>
<td>xdpi</td>
<td>2</td>
<td></td>
</tr>
<tr>
<td>480dpi</td>
<td>1080*1920</td>
<td>xxdpi</td>
<td>3</td>
<td></td>
</tr>
<tr>
<td>560dpi</td>
<td>1440*2596</td>
<td>xxxdpi</td>
<td>3.5</td>
<td></td>
</tr>
</tbody>
</table>
<p>1、图片适配，一般情况下都使用.9来适配，遇到特殊图片才在不同的dpi文件下放置不同的资源文件，一般项目维持xxhdpi资源就可以了。制作.9格式图片选最小图，否则默认大小撑大控件。</p>
<p>2、从本地读取图片尽可能的使用现在比较先进的图片加载图片组件来做，因为它们已经做了很多优化算法来压缩。</p>
<h2 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h2><p>1、减小Bitmap对象的内存占用<br>inSampleSize：缩放比例，在把图片载入内存之前，我们需要先计算出一个合适的缩放比例，避免不必要的大图载入。<br>decode format：解码格式，选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异<br>主动释放recycle</p>
<p>2、当界面不可见时释放内存，当用户打开了另外一个程序，我们的程序界面已经不再可见的时候，我们应当将所有和界面相关的资源进行释放。在这种场景下释放资源可以让系统缓存后台进程的能力显著增加，因此也会让用户体验变得更好。</p>
<pre><code class="java">
<span class="comment">/**
注意onTrimMemory()方法中的TRIM_MEMORY_UI_HIDDEN回调只有当我们程序中的所有UI组件全部不可见的时候才会触发，
*/</span>

<span class="meta">@Override</span>  
<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTrimMemory</span><span class="params">(<span class="keyword">int</span> level)</span> </span>{  
    <span class="keyword">super</span>.onTrimMemory(level);  
    <span class="keyword">switch</span> (level) {  
    <span class="keyword">case</span> TRIM_MEMORY_UI_HIDDEN:  
        <span class="comment">// 进行资源释放操作  </span>
        <span class="keyword">break</span>;  
    }  
}
</code></pre>
<table>
<thead>
<tr>
<th>状态</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>TRIM_MEMORY_RUNNING_MODERATE</td>
<td>表示应用程序正常运行，并且不会被杀掉。但是目前手机的内存已经有点低了，系统可能会开始根据LRU缓存规则来去杀死进程了</td>
</tr>
<tr>
<td>TRIM_MEMORY_RUNNING_LOW</td>
<td>表示应用程序正常运行，并且不会被杀掉。但是目前手机的内存已经非常低了，我们应该去释放掉一些不必要的资源以提升系统的性能，同时这也会直接影响到我们应用程序的性能</td>
</tr>
<tr>
<td>TRIM_MEMORY_RUNNING_CRITICAL</td>
<td>表示应用程序仍然正常运行，但是系统已经根据LRU缓存规则杀掉了大部分缓存的进程了。这个时候我们应当尽可能地去释放任何不必要的资源，不然的话系统可能会继续杀掉所有缓存中的进程，并且开始杀掉一些本来应当保持运行的进程，比如说后台运行的服务</td>
</tr>
<tr>
<td>TRIM_MEMORY_UI_HIDDEN</td>
<td>当用户打开了另外一个程序，我们的程序界面已经不再可见的时候</td>
</tr>
</tbody>
</table>
<h2 id="代码层次"><a href="#代码层次" class="headerlink" title="代码层次"></a>代码层次</h2><p>1、如果将一个对象的属性设置为static，那么就算对象实例被回收了，该属性也存在内存，生命周期为app的生命周期。</p>
<p>2、OOM：大图片使用前压缩。</p>
<p>3、OOM：减少大图。美工将全部规则图最小化，制作.9格式，以最小程度占用内存。</p>
<p>4、避免在Android里面使用Enum</p>
<p>5、Activity中移除掉所有的静态引用。</p>
<p>6、Activity中考虑用 EventBus 来解耦 Listener。</p>
<p>7、Activity中记着在不需要的时候，解除 Listener 的绑定。</p>
<p>8、Activity销毁时，主动释放资源，暂停网络请求</p>
<p>9、尽量用静态内部类。</p>
<p>10、做 Code Review。个人经验：Code Review 能很早的发现内存泄漏。</p>
<p>11、用类似 MAT，Eclipse Analyzer，LeakCanary 这样的工具分析内存。</p>
<p>12、在 Callback 里打印 Log。</p>
<p>13、构造Adapter时，使用缓存的 convertView</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android系统中内存有两个概念，一个是物理内存和进程内存。&lt;/p&gt;
&lt;p&gt;物理内存即移动设备上的RAM，当启动一个Android程序时，会启动一个Dalvik VM进程，系统会给它分配固定的内存空间（16M,32M不定），这块内存空间会映射到RAM上某个区域。然后这个Android程序就会运行在这块空间上。Java里会将这块空间分成Stack栈内存和Heap堆内存。stack（栈区）里存放对象的引用，heap(堆区)里存放实际对象数据。&lt;/p&gt;
&lt;p&gt;在程序运行中会创建对象，如果未合理管理内存，比如不及时回收无效空间就会造成内存泄露，严重的话可能导致使用内存超过系统分配内存，即内存溢出OOM，导致程序卡顿甚至直接退出。&lt;br&gt;其实很多方面都会导致内存紧张：&lt;br&gt;1、图片问题&lt;br&gt;2、资源释放问题&lt;br&gt;4、代码层次的优化&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.yefangqingchen.com/categories/Android/"/>
    
      <category term="Android 优化" scheme="http://www.yefangqingchen.com/categories/Android/Android-%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Android" scheme="http://www.yefangqingchen.com/tags/Android/"/>
    
      <category term="Android 优化" scheme="http://www.yefangqingchen.com/tags/Android-%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android布局优化</title>
    <link href="http://www.yefangqingchen.com/2017/03/31/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>http://www.yefangqingchen.com/2017/03/31/Android性能优化-布局优化总结/</id>
    <published>2017-03-31T10:21:45.000Z</published>
    <updated>2017-04-06T08:26:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在的APP有很多很炫的效果，没办法这是产品要求，产品想让用户能看到更好的效果，动画，这样有些效果就造成了 布局文件 里的布局叠加，一层一层的。当层叠的布局控件（包括第三方复杂控件）多了之后，Activity的onCreate流程，特别是UI的布局与渲染操作，布局过于复杂很可能导致严重的启动性能问题。我们有时候用一些APP是不是经常遇见一些界面启动很慢，白屏等 ？</p>
<p>为什么界面布局多了之后，会造成渲染慢 、卡顿、白屏等 ？</p>
<p>在[胡凯]的博客中看到过。正常来说Android系统每隔16ms发出Vsync信号，触发对UI进行渲染，如果每次渲染都成功，这样就能够达到流畅的画面所需要的60fps，为了能够实现60fps，这意味着程序的大多数操作都必须在16ms内完成。但是当有个操作需要比更多的时间来渲染时，系统在得到Vsync信号后就无法正常在16ms内完成渲染，所以就会出现丢帧现象，从而觉得卡顿。最具有代表性的就是ListView了。</p>
 <a id="more"></a>
<h2 id="布局优化"><a href="#布局优化" class="headerlink" title="布局优化"></a>布局优化</h2><blockquote>
<p>1、删除无用的布局<br>2、有选择性的使用ViewGroup<br>3、重用布局<br>4、减少布局层次</p>
</blockquote>
<h3 id="删除无用的控件"><a href="#删除无用的控件" class="headerlink" title="删除无用的控件"></a>删除无用的控件</h3><p>不解释，不用就删了吧。</p>
<h3 id="有选择性的使用ViewGroup"><a href="#有选择性的使用ViewGroup" class="headerlink" title="有选择性的使用ViewGroup"></a>有选择性的使用ViewGroup</h3><p>RelativeLayout和LinearLayout.都可以的话那么就采用LinearLayout. 因为RelativeLayout的功能比较复杂,它的布局过程需要花费更多的CPU时间. FrameLayout和LinearLayout都是一种简单高效的ViewGroup. </p>
<p>简单的举个例子，比如要实现以下效果:<br><img src="http://omsqy2wls.bkt.clouddn.com/view1.jpeg" alt="此处输入图片的描述"></p>
<p>1、使用LinearLayout实现</p>
<pre><code class="xml"><span class="tag">&lt;<span class="name">LinearLayout</span> 
    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>
    <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span>&gt;</span>

    <span class="tag">&lt;<span class="name">View</span>
        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span>
        <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>
        <span class="attr">android:layout_marginRight</span>=<span class="string">"6dip"</span>
        <span class="attr">android:background</span>=<span class="string">"@color/black"</span> /&gt;</span>

    <span class="tag">&lt;<span class="name">LinearLayout</span>
        <span class="attr">android:layout_width</span>=<span class="string">"0dip"</span>
        <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>
        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>
        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span>

        <span class="tag">&lt;<span class="name">View</span>
            <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>
            <span class="attr">android:layout_height</span>=<span class="string">"0dip"</span>
            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>
            <span class="attr">android:background</span>=<span class="string">"@color/red"</span>
            <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span> /&gt;</span>

        <span class="tag">&lt;<span class="name">View</span>
            <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>
            <span class="attr">android:layout_height</span>=<span class="string">"0dip"</span>
            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>
            <span class="attr">android:background</span>=<span class="string">"@color/blue"</span> /&gt;</span>

    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>

<span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>
</code></pre>
<p>2、使用RelativeLayout实现</p>
<pre><code class="xml"><span class="tag">&lt;<span class="name">RelativeLayout</span>
    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>
    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span>

    <span class="tag">&lt;<span class="name">View</span>
        <span class="attr">android:id</span>=<span class="string">"@+id/view1"</span>
        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span>
        <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>
        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span>
        <span class="attr">android:layout_marginRight</span>=<span class="string">"6dip"</span>
        <span class="attr">android:background</span>=<span class="string">"@color/black"</span> /&gt;</span>

    <span class="tag">&lt;<span class="name">View</span>
        <span class="attr">android:id</span>=<span class="string">"@+id/view2"</span>
        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>
        <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span>
        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@+id/view1"</span>
        <span class="attr">android:background</span>=<span class="string">"@color/red"</span>
        <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span> /&gt;</span>

    <span class="tag">&lt;<span class="name">View</span>
        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>
        <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span>
        <span class="attr">android:layout_below</span>=<span class="string">"@id/view2"</span>
        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@+id/view1"</span>
        <span class="attr">android:background</span>=<span class="string">"@color/blue"</span>
        <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span> /&gt;</span>

<span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span>
</code></pre>
<p><strong>明显使用RelativeLayout比使用LinearLayout层次少，那么肯定就用RelativeLayout了。</strong></p>
<h3 id="重用布局"><a href="#重用布局" class="headerlink" title="重用布局"></a>重用布局</h3><p>include: 主要用于布局的重用</p>
<pre><code class="xml"><span class="tag">&lt;<span class="name">LinearLayout</span>
    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>
    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>
    <span class="attr">android:background</span>=<span class="string">"@color/white"</span>
    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span>

    <span class="comment">&lt;!-- 搜索框 ,很多布局都会用到--&gt;</span>

    <span class="tag">&lt;<span class="name">include</span>
        <span class="attr">android:id</span>=<span class="string">"@+id/searchTitle"</span>
        <span class="attr">ayout</span>=<span class="string">"@layout/v3_search_title"</span> /&gt;</span>

<span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>
</code></pre>
<p>merge: 一般和include标签配合使用, 它可以减少布局的层级</p>
<pre><code class="xml">
<span class="comment">&lt;!-- 比如 v3_search_title.xml 中的根布局也是 LinearLayout 并且是vertical，就可以这样写--&gt;</span>

<span class="tag">&lt;<span class="name">LinearLayout</span>
    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>
    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>
    <span class="attr">android:background</span>=<span class="string">"@color/white"</span>
    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span>

    <span class="tag">&lt;<span class="name">merge</span>&gt;</span>  

        <span class="tag">&lt;<span class="name">include</span>
            <span class="attr">android:id</span>=<span class="string">"@+id/searchTitle"</span>
            <span class="attr">ayout</span>=<span class="string">"@layout/v3_search_title"</span> /&gt;</span>

    <span class="tag">&lt;/<span class="name">merge</span>&gt;</span> 

<span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>
</code></pre>
<h3 id="减少嵌套层次"><a href="#减少嵌套层次" class="headerlink" title="减少嵌套层次"></a>减少嵌套层次</h3><p>ViewStub: 提供了按需求加载的功能,如果不可见的复杂布局也需要进行绘制</p>
<pre><code class="xml">
<span class="comment">&lt;!-- 当需要时才会将ViewStub中的布局加载到内存,ViewStub继承了View, 这是一个非常轻量级的且宽高都是0, 因此它本身不参与任何的布局和绘制过程.--&gt;</span>

<span class="comment">&lt;!-- 比如一个页面有网络请求失败成功的布局，但是一开始它们是不需要显示的都是隐藏的，所以不需要一开就把这些布局都加载进去.--&gt;</span>

<span class="tag">&lt;<span class="name">LinearLayout</span>
    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>
    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>
    <span class="attr">android:background</span>=<span class="string">"@color/white"</span>
    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span>

    <span class="tag">&lt;<span class="name">ViewStub</span>
       <span class="attr">android:id</span>=<span class="string">"@+id/lodingViewStub"</span>
       <span class="attr">android:inflatedId</span>=<span class="string">"@+id/lodingView"</span>
       <span class="attr">android:layout</span>=<span class="string">"@layout/loding_layout"</span>
       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>
       <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span>/&gt;</span>

<span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>
</code></pre>
<pre><code class="java">
<span class="comment">// 方式一 通过设置visibility</span>
((ViewStub)findViewById(R.id.lodingViewStub))

 <span class="comment">// 方式二 通过inflate加载显示</span>
 View inflate =  ((ViewStub) findViewById(R.id.lodingViewStub)).inflate();

 <span class="comment">// 通过inflatedId这个id可以得到加载进来的布局的根布局</span>
 View commLv =  findViewById(R.id.lodingView);
</code></pre>
<p> 因此它本身不参与任何的布局和绘制过程. 而ViewStub存在的意义在于按需加载所需的布局文件, 在实际开发中, 有很多布局文件在正常情况系不会显示, 如网络异常等. 这个时候就没有必要再整个界面初始化的时候将其加载.</p>
<hr>
<p>参考资料：<br><a href="http://hukai.me/blog/archives/" target="_blank" rel="external">胡凯</a><br><a href="http://szysky.com/" target="_blank" rel="external">Szy’sky Blog</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在的APP有很多很炫的效果，没办法这是产品要求，产品想让用户能看到更好的效果，动画，这样有些效果就造成了 布局文件 里的布局叠加，一层一层的。当层叠的布局控件（包括第三方复杂控件）多了之后，Activity的onCreate流程，特别是UI的布局与渲染操作，布局过于复杂很可能导致严重的启动性能问题。我们有时候用一些APP是不是经常遇见一些界面启动很慢，白屏等 ？&lt;/p&gt;
&lt;p&gt;为什么界面布局多了之后，会造成渲染慢 、卡顿、白屏等 ？&lt;/p&gt;
&lt;p&gt;在[胡凯]的博客中看到过。正常来说Android系统每隔16ms发出Vsync信号，触发对UI进行渲染，如果每次渲染都成功，这样就能够达到流畅的画面所需要的60fps，为了能够实现60fps，这意味着程序的大多数操作都必须在16ms内完成。但是当有个操作需要比更多的时间来渲染时，系统在得到Vsync信号后就无法正常在16ms内完成渲染，所以就会出现丢帧现象，从而觉得卡顿。最具有代表性的就是ListView了。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.yefangqingchen.com/categories/Android/"/>
    
      <category term="Android 优化" scheme="http://www.yefangqingchen.com/categories/Android/Android-%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Android" scheme="http://www.yefangqingchen.com/tags/Android/"/>
    
      <category term="Android 优化" scheme="http://www.yefangqingchen.com/tags/Android-%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Mac安装React Native for Android 环境</title>
    <link href="http://www.yefangqingchen.com/2017/03/30/Mac%E5%AE%89%E8%A3%85React_Native_for_Android%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.yefangqingchen.com/2017/03/30/Mac安装React_Native_for_Android环境/</id>
    <published>2017-03-30T08:27:21.000Z</published>
    <updated>2017-03-30T08:50:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于Mac安装React Native环境来说很简单，网上的文章写的有点麻烦，有些东西都不知道是干什么的。自己记录一下安装过程。</p>
<a id="more"></a>
<h2 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/bin/ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></div></pre></td></tr></table></figure>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><pre><code class="java">$ brew install node

<span class="comment">//安装完node后建议设置npm镜像以加速后面的过程（或使用科学上网工具）</span>

npm config set registry https:<span class="comment">//registry.npm.taobao.org --global</span>
npm config set disturl https:<span class="comment">//npm.taobao.org/dist --global</span>
</code></pre>
<h2 id="安装watchman"><a href="#安装watchman" class="headerlink" title="安装watchman"></a>安装watchman</h2><pre><code class="java">$ brew install watchman

//如果出现以下错误：
You must `brew link pcre&#39; before watchman can be installed

//根据提示执行
$ brew link pcre

//如果有一下错误：（是因为没有权限）
Linking /usr/local/Cellar/pcre/8.40... 
Error: Could not symlink lib/pkgconfig/libpcre.pc
/usr/local/lib/pkgconfig is not writable.

//继续执行：(username 替换成你的mac用户名)
$ sudo chown username /usr/local/lib/pkgconfig

//然后在执行，就安装成功了
$ brew install watchman
</code></pre>
<h2 id="安装React-Native"><a href="#安装React-Native" class="headerlink" title="安装React Native"></a>安装React Native</h2><pre><code class="java">$ npm install -g react-<span class="keyword">native</span>-cli
</code></pre>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><pre><code class="java"><span class="comment">//前提已经装好了android studio。</span>

$ open ~/.bash_profile

<span class="comment">//加入到.bash_profile文件中</span>
export ANDROID_HOME=/Users/Rock/Library/Android/sdk/
export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools

$ source ~/.bash_profile
</code></pre>
<h2 id="创建React-Native项目"><a href="#创建React-Native项目" class="headerlink" title="创建React Native项目"></a>创建React Native项目</h2><pre><code class="java"><span class="comment">//在你的工作空间下执行，目录随意比如我的是（workspace/react_native）</span>

react-<span class="keyword">native</span> init ReactNativeDemo

第一次稍等片刻就会出现以下结果：
</code></pre>
<h3 id="执行react-native-init-ReactNativeDemo-结果"><a href="#执行react-native-init-ReactNativeDemo-结果" class="headerlink" title="执行react-native init ReactNativeDemo 结果"></a>执行react-native init ReactNativeDemo 结果</h3><pre><code class="java">Rock:react_native Rock$ react-<span class="keyword">native</span> init ReactNativeDemo
This will walk you through creating a <span class="keyword">new</span> React Native project in /Users/Rock/workspace/react_native/ReactNativeDemo
Using yarn v0.21.3
Installing react-<span class="keyword">native</span>...
yarn add v0.21.3
info No lockfile found.
[<span class="number">1</span>/<span class="number">4</span>] 🔍  Resolving packages...
warning react-<span class="keyword">native</span> &gt; xcode &gt; node-uuid@<span class="number">1.4</span>.7: Use uuid <span class="keyword">module</span> instead
[<span class="number">2</span>/<span class="number">4</span>] 🚚  Fetching packages...
[<span class="number">3</span>/<span class="number">4</span>] 🔗  Linking dependencies...
warning <span class="string">"react-native@0.42.3"</span> has unmet peer dependency <span class="string">"react@~15.4.1"</span>.
[<span class="number">4</span>/<span class="number">4</span>] 📃  Building fresh packages...
success Saved lockfile.
success Saved <span class="number">430</span> <span class="keyword">new</span> dependencies.

================================================================
                     中间省略N行。。。。。。
================================================================

✨  Done in <span class="number">12.53</span>s.
To run your app on iOS:
   cd /Users/Rock/workspace/react_native/ReactNativeDemo
   react-<span class="keyword">native</span> run-ios
   - or -
   Open ios/ReactNativeDemo.xcodeproj in Xcode
   Hit the Run button
To run your app on Android:
   cd /Users/Rock/workspace/react_native/<span class="function">ReactNativeDemo
   Have an Android emulator <span class="title">running</span> <span class="params">(quickest way to get started)</span>, or a device connected
   react-<span class="keyword">native</span> run-android
Rock:react_native Rock$</span>
</code></pre>
<h3 id="进入ReactNativeDemo目录"><a href="#进入ReactNativeDemo目录" class="headerlink" title="进入ReactNativeDemo目录"></a>进入ReactNativeDemo目录</h3><pre><code class="java">===================================
注意看一下结果第二行，然后进入到此目录

This will walk you through creating a <span class="keyword">new</span> React Native project in /Users/Rock/workspace/react_native/ReactNativeDemo

===================================
<span class="comment">//执行一下命令</span>
$ cd ReactNativeDemo
$ ls -la
===================================

<span class="comment">//结果</span>
Rock:react_native Rock$ cd ReactNativeDemo
Rock:ReactNativeDemo Rock$ ls -la
total <span class="number">360</span>
drwxr-xr-x   <span class="number">17</span> Rock  staff     <span class="number">578</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> .
drwxr-xr-x    <span class="number">4</span> Rock  staff     <span class="number">136</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">53</span> ..
-rw-r--r--    <span class="number">1</span> Rock  staff      <span class="number">31</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> .babelrc
-rw-r--r--    <span class="number">1</span> Rock  staff     <span class="number">114</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> .buckconfig
-rw-r--r--    <span class="number">1</span> Rock  staff    <span class="number">1371</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> .flowconfig
-rw-r--r--    <span class="number">1</span> Rock  staff      <span class="number">16</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> .gitattributes
-rw-r--r--    <span class="number">1</span> Rock  staff     <span class="number">774</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> .gitignore
-rw-r--r--    <span class="number">1</span> Rock  staff       <span class="number">2</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> .watchmanconfig
drwxr-xr-x    <span class="number">4</span> Rock  staff     <span class="number">136</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> __tests__
drwxr-xr-x   <span class="number">10</span> Rock  staff     <span class="number">340</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> android
-rw-r--r--    <span class="number">1</span> Rock  staff      <span class="number">67</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> app.json
-rw-r--r--    <span class="number">1</span> Rock  staff    <span class="number">1121</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> index.android.js
-rw-r--r--    <span class="number">1</span> Rock  staff    <span class="number">1087</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> index.ios.js
drwxr-xr-x    <span class="number">7</span> Rock  staff     <span class="number">238</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> ios
drwxr-xr-x  <span class="number">554</span> Rock  staff   <span class="number">18836</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> node_modules
-rw-r--r--    <span class="number">1</span> Rock  staff     <span class="number">433</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> <span class="keyword">package</span>.json
-rw-r--r--    <span class="number">1</span> Rock  staff  <span class="number">142776</span>  <span class="number">3</span> <span class="number">30</span> <span class="number">13</span>:<span class="number">54</span> yarn.lock
Rock:ReactNativeDemo Rock$
</code></pre>
<h3 id="ReactNativeDemo目录下文件说明"><a href="#ReactNativeDemo目录下文件说明" class="headerlink" title="ReactNativeDemo目录下文件说明"></a>ReactNativeDemo目录下文件说明</h3><blockquote>
<ol>
<li>React Native使用npm管理package，因此有node_modules目录。</li>
<li>android 和ios目录包含了典型的Android/iOS 项目，可以分别使用Android Studio/Xcode打开或者运行。</li>
<li>index.android.js 和 index.ios.js 文件包含了React Native源码的主入口。</li>
</ol>
</blockquote>
<h3 id="运行-ReactNativeDemo"><a href="#运行-ReactNativeDemo" class="headerlink" title="运行 ReactNativeDemo"></a>运行 ReactNativeDemo</h3><pre><code class="java">
$ react-<span class="keyword">native</span> run-android

注意：
    <span class="number">1</span>、react-<span class="keyword">native</span> run-android一定要在ReactNativeDemo目录下
    <span class="number">2</span>、要提前打开模拟器
</code></pre>
<p><img src="http://omsqy2wls.bkt.clouddn.com/2017-03-30%2015.36.54.gif" alt="此处输入图片的描述"></p>
<blockquote>
<p>参考链接<br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/1112/6766.html" target="_blank" rel="external">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/1112/6766.html</a><br><a href="http://reactnative.cn/docs/0.42/getting-started.html#content" target="_blank" rel="external">http://reactnative.cn/docs/0.42/getting-started.html#content</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于Mac安装React Native环境来说很简单，网上的文章写的有点麻烦，有些东西都不知道是干什么的。自己记录一下安装过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.yefangqingchen.com/categories/Android/"/>
    
      <category term="React Native" scheme="http://www.yefangqingchen.com/categories/Android/React-Native/"/>
    
    
      <category term="Android" scheme="http://www.yefangqingchen.com/tags/Android/"/>
    
      <category term="React Native" scheme="http://www.yefangqingchen.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Android 正常权限和危险权限</title>
    <link href="http://www.yefangqingchen.com/2017/03/29/Android%E6%AD%A3%E5%B8%B8%E6%9D%83%E9%99%90%E5%92%8C%E5%8D%B1%E9%99%A9%E6%9D%83%E9%99%90/"/>
    <id>http://www.yefangqingchen.com/2017/03/29/Android正常权限和危险权限/</id>
    <published>2017-03-29T05:31:33.000Z</published>
    <updated>2017-04-06T08:26:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Android 6.0（API 级别 23）权限越来越规范，不像以往那样直接在AndroidManifest.xml 中使用 uses-permission 标签是声明你所要的权限就可以使用了。现在的权限分为 正常权限合危险权限、以及特殊权限。 </p>
</blockquote>
<ol>
<li><p>正常权限 :正常权限涵盖应用需要访问其沙盒外部数据或资源，但对用户隐私或其他应用操作风险很小的区域。例如，设置时区的权限就是正常权限。如果应用声明其需要正常权限，系统会自动向应用授予该权限。如需当前正常权限的完整列表，请参阅正常权限。</p>
</li>
<li><p>危险权限 : 涵盖应用需要涉及用户隐私信息的数据或资源，或者可能对用户存储的数据或其他应用的操作产生影响的区域。例如，能够读取用户的联系人属于危险权限。如果应用声明其需要危险权限，则用户必须明确向应用授予该权限</p>
</li>
<li><p>特殊权限 : 一些特别敏感的权限,例如设置悬浮窗</p>
<a id="more"></a>
</li>
</ol>
<h2 id="正常权限"><a href="#正常权限" class="headerlink" title="正常权限"></a>正常权限</h2><table>
<thead>
<tr>
<th>权限</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACCESS_LOCATION_EXTRA_COMMANDS</td>
<td>允许程序访问额外的定位提供者指令</td>
</tr>
<tr>
<td>ACCESS_NETWORK_STATE</td>
<td>获取网络信息状态，如当前的网络连接是否有效</td>
</tr>
<tr>
<td>ACCESS_NOTIFICATION_POLICY</td>
<td>访问通知政策的应用程序的标记权限</td>
</tr>
<tr>
<td>ACCESS_WIFI_STATE</td>
<td>允许应用程序访问Wi-Fi网络状态信息</td>
</tr>
<tr>
<td>BLUETOOTH</td>
<td>允许应用程序连接配对过的蓝牙设备</td>
</tr>
<tr>
<td>BLUETOOTH_ADMIN</td>
<td>允许应用程序管理蓝牙,搜索和配对新的蓝牙设备</td>
</tr>
<tr>
<td>BROADCAST_STICKY</td>
<td>允许应用程序收到广播后快速收到下一个广播</td>
</tr>
<tr>
<td>CHANGE_NETWORK_STATE</td>
<td>允许应用程序改变网络连接状态</td>
</tr>
<tr>
<td>CHANGE_WIFI_MULTICAST_STATE</td>
<td>允许应用程序设置WiFi连接多模式</td>
</tr>
<tr>
<td>CHANGE_WIFI_STATE</td>
<td>允许应用程序改变Wi-Fi连接状态</td>
</tr>
<tr>
<td>DISABLE_KEYGUARD</td>
<td>允许应用程序禁用键盘锁</td>
</tr>
<tr>
<td>EXPAND_STATUS_BAR</td>
<td>允许应用程序扩展或收缩状态栏</td>
</tr>
<tr>
<td>GET_PACKAGE_SIZE</td>
<td>允许应用程序获取应用的文件大小</td>
</tr>
<tr>
<td>INSTALL_SHORTCUT</td>
<td>允许应用程序在Launcher中安装快捷方式</td>
</tr>
<tr>
<td>INTERNET</td>
<td>允许应用程序访问网络连接</td>
</tr>
<tr>
<td>KILL_BACKGROUND_PROCESSES</td>
<td>允许应用程序调用killBackgroundProcesses(String)方法结束后台进程</td>
</tr>
<tr>
<td>MODIFY_AUDIO_SETTINGS</td>
<td>允许应用程序修改全局音频设置</td>
</tr>
<tr>
<td>NFC</td>
<td>允许应用程序执行NFC近距离通讯操作</td>
</tr>
<tr>
<td>READ_SYNC_SETTINGS</td>
<td>允许应用程序读取同步设置，读取Google在线同步设置</td>
</tr>
<tr>
<td>READ_SYNC_STATS</td>
<td>允许应用程序读取同步状态，读取Google在线同步设置</td>
</tr>
<tr>
<td>RECEIVE_BOOT_COMPLETED</td>
<td>允许应用程序开机自动运行</td>
</tr>
<tr>
<td>REORDER_TASKS</td>
<td>允许应用程序改变Z轴排列任务</td>
</tr>
<tr>
<td>REQUEST_IGNORE_BATTERY_OPTIMIZATIONS</td>
<td>为了使用ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS，必须保留应用程序的权限。</td>
</tr>
<tr>
<td>REQUEST_INSTALL_PACKAGES</td>
<td>允许应用程序请求安装软件包</td>
</tr>
<tr>
<td>SET_ALARM</td>
<td>允许应用程序设置闹铃提醒</td>
</tr>
<tr>
<td>SET_TIME_ZONE</td>
<td>允许应用程序设置系统时区</td>
</tr>
<tr>
<td>SET_WALLPAPER</td>
<td>允许应用程序设置桌面壁纸</td>
</tr>
<tr>
<td>SET_WALLPAPER_HINTS</td>
<td>允许应用程序设置壁纸建议</td>
</tr>
<tr>
<td>TRANSMIT_IR</td>
<td>允许使用设备的红外发射器（如果有的话）</td>
</tr>
<tr>
<td>UNINSTALL_SHORTCUT</td>
<td>系统已不再支持此权限</td>
</tr>
<tr>
<td>USE_FINGERPRINT</td>
<td>允许应用使用指纹硬件</td>
</tr>
<tr>
<td>VIBRATE</td>
<td>允许访问振动设备</td>
</tr>
<tr>
<td>WAKE_LOCK</td>
<td>允许应用程序在手机锁屏后进程仍然运行</td>
</tr>
<tr>
<td>WRITE_SYNC_SETTINGS</td>
<td>允许程序Google在线同步设置</td>
</tr>
</tbody>
</table>
<h3 id="正常权限使用方法"><a href="#正常权限使用方法" class="headerlink" title="正常权限使用方法"></a>正常权限使用方法</h3><blockquote>
<p>AndroidManifest.xml 中 使用 uses-permission 标签声明</p>
</blockquote>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;
</code></pre><hr>
<h2 id="危险权限"><a href="#危险权限" class="headerlink" title="危险权限"></a>危险权限</h2><hr>
<table>
<thead>
<tr>
<th>CALENDAR</th>
<th>日历相关权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ_CALENDAR</td>
<td>允许应用程序读取用户日历数据</td>
</tr>
<tr>
<td>WRITE_CALENDAR</td>
<td>允许应用程序写入用户日程，但不可读取</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>CAMERA</th>
<th>相机相关权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ_CALENDAR</td>
<td>允许应用程序访问摄像头</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>CONTACTS</th>
<th>联系人相关权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ_CONTACTS</td>
<td>允许应用程序读取联系人通讯录信息</td>
</tr>
<tr>
<td>WRITE_CONTACTS</td>
<td>允许应用程序写入联系人，但不可读取</td>
</tr>
<tr>
<td>GET_ACCOUNTS</td>
<td>允许应用程序访问GMail账户列表</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>LOCATION</th>
<th>定位相关权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACCESS_FINE_LOCATION</td>
<td>允许应用程序通过GPS获取精确的位置信息</td>
</tr>
<tr>
<td>ACCESS_COARSE_LOCATION</td>
<td>允许应用程序通过WiFi或移动基站获取粗略的位置信息</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>MICROPHONE</th>
<th>麦克风相关权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>RECORD_AUDIO</td>
<td>允许应用程序录制音频</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>PHONE</th>
<th>电话相关权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ_PHONE_STATE</td>
<td>允许应用程序读取电话状态</td>
</tr>
<tr>
<td>CALL_PHONE</td>
<td>允许应用程序拨打电话,从非系统拨号器里初始化一个电话拨号</td>
</tr>
<tr>
<td>READ_CALL_LOG</td>
<td>允许应用程序读取通话记录</td>
</tr>
<tr>
<td>WRITE_CALL_LOG</td>
<td>允许应用程序写入通话记录</td>
</tr>
<tr>
<td>ADD_VOICEMAIL</td>
<td>允许应用程序使用语音邮件</td>
</tr>
<tr>
<td>USE_SIP</td>
<td>允许应用程序使用SIP视频服务</td>
</tr>
<tr>
<td>PROCESS_OUTGOING_CALLS</td>
<td>允许应用程序监视、修改外拨电话</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>SENSORS</th>
<th>传感器相关权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>BODY_SENSORS</td>
<td>允许应用程序访问用户用来衡量身体内发生的情况的传感器的数据，例如心率</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>SMS</th>
<th>短信相关权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>SEND_SMS</td>
<td>允许应用程序发送短信</td>
</tr>
<tr>
<td>RECEIVE_SMS</td>
<td>允许应用程序接收短信</td>
</tr>
<tr>
<td>READ_SMS</td>
<td>允许应用程序读取短信内容</td>
</tr>
<tr>
<td>RECEIVE_WAP_PUSH</td>
<td>允许应用程序接收WAP PUSH信息</td>
</tr>
<tr>
<td>RECEIVE_MMS</td>
<td>允许应用程序接收彩信</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>STORAGE</th>
<th>存储相关权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ_EXTERNAL_STORAGE</td>
<td>允许应用程序读取扩展存储器</td>
</tr>
<tr>
<td>WRITE_EXTERNAL_STORAGE</td>
<td>允许应用程序写入外部存储，如SD卡上写文件</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="危险权限使用方法"><a href="#危险权限使用方法" class="headerlink" title="危险权限使用方法"></a>危险权限使用方法</h3><pre><code>比如现在项目中有一个上传相片的功能，如果你的（API 级别是 23），那么直接在AndroidManifest.xml 中使用 uses-permission声明READ_EXTERNAL_STORAGE权限是没有用的，会报错：

java.lang.SecurityException: Permission Denial: reading com.android.providers.media.MediaProvider uri content://media/external/images/media from pid=5244, uid=10144 requires android.permission.READ_EXTERNAL_STORAGE, or grantUriPermission()

所以要动态请求此权限
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> READ_EXTERNAL_STORAGE = <span class="number">0x01</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAMERA = <span class="number">0x02</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 针对6.0动态请求权限问题</div><div class="line">     * 判断是否允许此权限</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> permissions</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@TargetApi</span>(Build.VERSION_CODES.M)</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">hasPermission</span><span class="params">(String... permissions)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (String permission : permissions) &#123;</div><div class="line">            <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>, permission) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                <span class="keyword">if</span>(shouldShowRequestPermissionRationale(permission))&#123;</div><div class="line">                    showToast(<span class="string">"请允许次权限"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 动态请求权限</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> code</div><div class="line">     * <span class="doctag">@param</span> permissions</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">requestPermission</span><span class="params">(<span class="keyword">int</span> code, String... permissions)</span> </span>&#123;</div><div class="line">        ActivityCompat.requestPermissions(<span class="keyword">this</span>, permissions, code);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理权限请求响应</div><div class="line">     * <span class="doctag">@param</span> requestCode</div><div class="line">     * <span class="doctag">@param</span> permissions</div><div class="line">     * <span class="doctag">@param</span> grantResults</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">            <span class="keyword">case</span> READ_EXTERNAL_STORAGE:</div><div class="line">                <span class="keyword">if</span> (grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                    readLocalMedia();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    showToast(<span class="string">"读取内存卡权限已被拒绝"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> CAMERA:</div><div class="line">                <span class="keyword">if</span> (grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                    startCamera();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    showToast(<span class="string">"拍照权限已被拒绝"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 读取相册信息</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">readLocalMedia</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 启动相机</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startCamera</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        Toast.makeText(BaseActivity.<span class="keyword">this</span>, msg, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>调用以上代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 第一次获取过相册列表</span></div><div class="line"><span class="comment">// 先判断手机是否有读取权限，主要是针对6.0已上系统</span></div><div class="line"><span class="keyword">if</span> (hasPermission(Manifest.permission.READ_EXTERNAL_STORAGE)) &#123;</div><div class="line">       readLocalMedia();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        requestPermission(READ_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意:即使支持了运行时权限，也要在Manifest声明，因为市场应用会根据这个信息和硬件设备进行匹配，决定你的应用是否在该设备上显示。</strong></p>
</blockquote>
<h2 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h2><table>
<thead>
<tr>
<th>权限</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>SYSTEM_ALERT_WINDOW</td>
<td>设置悬浮窗</td>
</tr>
<tr>
<td>WRITE_SETTINGS</td>
<td>修改系统设置</td>
</tr>
</tbody>
</table>
<blockquote>
<p>特殊权限的授权，做法是使用startActivityForResult启动授权界面来完成。</p>
</blockquote>
<h3 id="获取-SYSTEM-ALERT-WINDOW-权限"><a href="#获取-SYSTEM-ALERT-WINDOW-权限" class="headerlink" title="获取 SYSTEM_ALERT_WINDOW 权限"></a>获取 SYSTEM_ALERT_WINDOW 权限</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CODE = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">requestAlertWindowPermission</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/** 使用Action Settings.ACTION_MANAGE_OVERLAY_PERMISSION启动隐式Intent */</span></div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</div><div class="line"></div><div class="line">    <span class="comment">/** 使用"package:" + getPackageName()携带App的包名信息 */</span></div><div class="line">    intent.setData(Uri.parse(<span class="string">"package:"</span> + getPackageName()));</div><div class="line"></div><div class="line">    startActivityForResult(intent, REQUEST_CODE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">    <span class="keyword">if</span> (requestCode == REQUEST_CODE) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">/** 使用Settings.canDrawOverlays方法判断授权结果*/</span></div><div class="line">        <span class="keyword">if</span> (Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</div><div class="line">          Log.i(LOGTAG, <span class="string">"onActivityResult granted"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取-WRITE-SETTINGS-权限"><a href="#获取-WRITE-SETTINGS-权限" class="headerlink" title="获取 WRITE_SETTINGS 权限"></a>获取 WRITE_SETTINGS 权限</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CODE_WRITE_SETTINGS = <span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestWriteSettings</span><span class="params">()</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">/** 使用Action Settings.ACTION_MANAGE_WRITE_SETTINGS 启动隐式Intent */</span></div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_WRITE_SETTINGS);</div><div class="line"></div><div class="line">    <span class="comment">/** 使用"package:" + getPackageName()携带App的包名信息 */</span></div><div class="line">    intent.setData(Uri.parse(<span class="string">"package:"</span> + getPackageName()));</div><div class="line"></div><div class="line"></div><div class="line">    startActivityForResult(intent, REQUEST_CODE_WRITE_SETTINGS );</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">    <span class="keyword">if</span> (requestCode == REQUEST_CODE_WRITE_SETTINGS) &#123;</div><div class="line"></div><div class="line">        <span class="comment">/** 使用Settings.System.canWrite方法检测授权结果 */</span></div><div class="line">        <span class="keyword">if</span> (Settings.System.canWrite(<span class="keyword">this</span>)) &#123;</div><div class="line">            Log.i(LOGTAG, <span class="string">"onActivityResult write settings granted"</span> );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>参考链接</p>
</blockquote>
<p><a href="https://developer.android.com/training/permissions/requesting.html" target="_blank" rel="external">在运行时请求权限-官网</a><br><a href="https://developer.android.com/guide/topics/permissions/normal-permissions.html?hl=zh-cn" target="_blank" rel="external">正常权限表-官网</a><br><a href="https://developer.android.com/guide/topics/security/permissions.html?hl=zh-cn" target="_blank" rel="external">危险权限表-官网</a><br><a href="http://droidyue.com/blog/2016/01/17/understanding-marshmallow-runtime-permission/" target="_blank" rel="external">聊一聊Android 6.0的运行时权限</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android 6.0（API 级别 23）权限越来越规范，不像以往那样直接在AndroidManifest.xml 中使用 uses-permission 标签是声明你所要的权限就可以使用了。现在的权限分为 正常权限合危险权限、以及特殊权限。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;正常权限 :正常权限涵盖应用需要访问其沙盒外部数据或资源，但对用户隐私或其他应用操作风险很小的区域。例如，设置时区的权限就是正常权限。如果应用声明其需要正常权限，系统会自动向应用授予该权限。如需当前正常权限的完整列表，请参阅正常权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;危险权限 : 涵盖应用需要涉及用户隐私信息的数据或资源，或者可能对用户存储的数据或其他应用的操作产生影响的区域。例如，能够读取用户的联系人属于危险权限。如果应用声明其需要危险权限，则用户必须明确向应用授予该权限&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;特殊权限 : 一些特别敏感的权限,例如设置悬浮窗&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.yefangqingchen.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.yefangqingchen.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SwipeToLoadLayout 用法</title>
    <link href="http://www.yefangqingchen.com/2017/03/22/SwipeToLoadLayout%E7%94%A8%E6%B3%95/"/>
    <id>http://www.yefangqingchen.com/2017/03/22/SwipeToLoadLayout用法/</id>
    <published>2017-03-22T08:10:00.000Z</published>
    <updated>2017-03-29T10:49:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>   还在用那些被别人改成乱七八糟，问题百出、不能定制、难用难懂难适配的上下拉框架吗 ？ </p>
<p>   虽然网上很多已经有很多写好了开源刷新控件，但是实用性太差了，自己玩玩可以，但是在真正的项目中想用，还是不行。但是现在我自己的项目中（公司项目）就是使用的SwipeToLoadLayout，用了之后觉得真的太好用了，太简单了。。。</p>
<p>   SwipeToLoadLayout项目中已经实现了几个主流的刷新效果，Twitter style，JD style，google style，Yalantis style，demo也下载下来看了，真不错，还支持各种自定义，自定义头部和尾部，头部还分classic，above，blow，scale四种类型，还有自动刷新的效果，体验也很流畅。</p>
<p>  支持各种View和ViewGroup（ListView，ScrollView，RecyclerView，GridView，WebView，Linearlayout，RelativeLayout，FrameLayout，ImageView，TextView等）的刷新和加载，还支持自动刷新，手动刷新，自动加载，手动加载，禁止刷新，禁止加载等操作，完全满足需求。</p>
<p>项目地址 <a href="https://github.com/Aspsine/SwipeToLoadLayout" target="_blank" rel="external">https://github.com/Aspsine/SwipeToLoadLayout</a></p>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="打开在app的build-gradle中配置"><a href="#打开在app的build-gradle中配置" class="headerlink" title="打开在app的build.gradle中配置"></a>打开在app的build.gradle中配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    maven &#123; url <span class="string">"https://jitpack.io"</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">	compile <span class="string">'com.github.Aspsine:SwipeToLoadLayout:1.0.4'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://omsqy2wls.bkt.clouddn.com/WechatIMG1.jpeg" alt="此处输入图片的描述"></p>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><blockquote>
<p>SwipeToLoadLayout 使用上下拉刷新需要自己自定义上下拉效果，很简单，简单到只需要定义个TextView。</p>
</blockquote>
<ul>
<li><p>1、定义上下拉刷新 , 上下拉刷可以定义为一样的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefreshHeadView</span> <span class="keyword">extends</span> <span class="title">TextView</span> <span class="keyword">implements</span> <span class="title">SwipeRefreshTrigger</span> , <span class="title">SwipeTrigger</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RefreshHeadView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RefreshHeadView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RefreshHeadView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">        setText(<span class="string">"正在拼命加载数据..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepare</span><span class="params">()</span> </span>&#123;</div><div class="line">        setText(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMove</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">boolean</span> isComplete, <span class="keyword">boolean</span> automatic)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isComplete) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (y &gt; getHeight()) &#123;</div><div class="line">                setText(<span class="string">"释放刷新"</span>);</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &lt; getHeight()) &#123;</div><div class="line"></div><div class="line">                setText(<span class="string">"滑动即可刷新"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            setText(<span class="string">"刷新返回"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRelease</span><span class="params">()</span> </span>&#123;</div><div class="line">        setText(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">        setText(<span class="string">"刷新成功"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReset</span><span class="params">()</span> </span>&#123;</div><div class="line">        setText(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>2、布局文件中</p>
</li>
</ul>
<blockquote>
<p>注意<br>SwipeToLoadLayout 中布局包裹的View id是固定的，不能改，否则用不了<br>刷新头部View id = swipe_refresh_header;<br>刷新目标View id = swipe_target;<br>刷新底部View id = swipe_load_more_footer;</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:orientation="vertical"&gt;</div><div class="line"></div><div class="line">    &lt;com.aspsine.swipetoloadlayout.SwipeToLoadLayout</div><div class="line">        android:id="@+id/swipeToLoadLayout"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"&gt;</div><div class="line"></div><div class="line">        &lt;rock.example.com.refresh.RefreshHeadView</div><div class="line">            android:id="@id/swipe_refresh_header"</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="100dp"</div><div class="line">            android:gravity="center" /&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v7.widget.RecyclerView</div><div class="line">            android:id="@+id/swipe_target"</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="match_parent" /&gt;</div><div class="line"></div><div class="line"></div><div class="line">        &lt;rock.example.com.refresh.RefreshFooterView</div><div class="line">            android:id="@id/swipe_load_more_footer"</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="100dp"</div><div class="line">            android:gravity="center" /&gt;</div><div class="line">    &lt;/com.aspsine.swipetoloadlayout.SwipeToLoadLayout&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<h2 id="运行效果-（可以自己定义好看点的）"><a href="#运行效果-（可以自己定义好看点的）" class="headerlink" title="运行效果 （可以自己定义好看点的）"></a>运行效果 （可以自己定义好看点的）</h2><p><img src="http://omsqy2wls.bkt.clouddn.com/2017-03-22%2016.15.07.gif" alt="此处输入图片的描述"></p>
<h2 id="SwipeToLoadLayout常用属性"><a href="#SwipeToLoadLayout常用属性" class="headerlink" title="SwipeToLoadLayout常用属性"></a>SwipeToLoadLayout常用属性</h2><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:refresh_enabled</td>
<td>设置是否可以下拉刷新</td>
</tr>
<tr>
<td>app:load_more_enabled</td>
<td>设置是否可以上拉加载更多</td>
</tr>
<tr>
<td>app:swipe_style</td>
<td>设置下拉刷新与上拉加载的样式，其值为classic，above，blew或scale</td>
</tr>
<tr>
<td>app:refresh_trigger_offset</td>
<td>触发下拉刷新的偏移量，默认值是下拉刷新头部的高度</td>
</tr>
<tr>
<td>app:refresh_final_drag_offset</td>
<td>下拉刷新最大可以拖动的偏移量</td>
</tr>
<tr>
<td>app:load_more_final_drag_offset</td>
<td>上拉加载更多最大可以拖动的偏移量</td>
</tr>
<tr>
<td>app:release_to_refreshing_scrolling_duration</td>
<td>释放下拉刷新持续滚动的时间</td>
</tr>
<tr>
<td>app:release_to_loading_more_scrolling_duration</td>
<td>释放上拉加载更多持续滚动的时间</td>
</tr>
<tr>
<td>app:refresh_complete_delay_duration</td>
<td>下拉刷新完成延迟的持续时间</td>
</tr>
<tr>
<td>app:load_more_complete_delay_duration</td>
<td>上拉加载更多完成延迟的持续时间</td>
</tr>
<tr>
<td>app:refresh_complete_to_default_scrolling_duration</td>
<td>默认完成下拉刷新持续滚动时间</td>
</tr>
<tr>
<td>app:load_more_complete_to_default_scrolling_duration</td>
<td>默认完成上拉加载更多持续滚动时间</td>
</tr>
<tr>
<td>app:default_to_refreshing_scrolling_duration</td>
<td>默认下拉刷新滚动时间</td>
</tr>
<tr>
<td>app:default_to_loading_more_scrolling_duration</td>
<td>默认上拉加载更多滚动时间</td>
</tr>
</tbody>
</table>
<hr>
<blockquote>
<p>参考链接<br><a href="http://www.jianshu.com/p/d69ae409a52c" target="_blank" rel="external">http://www.jianshu.com/p/d69ae409a52c</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;   还在用那些被别人改成乱七八糟，问题百出、不能定制、难用难懂难适配的上下拉框架吗 ？ &lt;/p&gt;
&lt;p&gt;   虽然网上很多已经有很多写好了开源刷新控件，但是实用性太差了，自己玩玩可以，但是在真正的项目中想用，还是不行。但是现在我自己的项目中（公司项目）就是使用的SwipeToLoadLayout，用了之后觉得真的太好用了，太简单了。。。&lt;/p&gt;
&lt;p&gt;   SwipeToLoadLayout项目中已经实现了几个主流的刷新效果，Twitter style，JD style，google style，Yalantis style，demo也下载下来看了，真不错，还支持各种自定义，自定义头部和尾部，头部还分classic，above，blow，scale四种类型，还有自动刷新的效果，体验也很流畅。&lt;/p&gt;
&lt;p&gt;  支持各种View和ViewGroup（ListView，ScrollView，RecyclerView，GridView，WebView，Linearlayout，RelativeLayout，FrameLayout，ImageView，TextView等）的刷新和加载，还支持自动刷新，手动刷新，自动加载，手动加载，禁止刷新，禁止加载等操作，完全满足需求。&lt;/p&gt;
&lt;p&gt;项目地址 &lt;a href=&quot;https://github.com/Aspsine/SwipeToLoadLayout&quot;&gt;https://github.com/Aspsine/SwipeToLoadLayout&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.yefangqingchen.com/categories/Android/"/>
    
      <category term="开源控件" scheme="http://www.yefangqingchen.com/categories/Android/%E5%BC%80%E6%BA%90%E6%8E%A7%E4%BB%B6/"/>
    
    
      <category term="Android" scheme="http://www.yefangqingchen.com/tags/Android/"/>
    
      <category term="开源控件" scheme="http://www.yefangqingchen.com/tags/%E5%BC%80%E6%BA%90%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>RxJava 学习笔记</title>
    <link href="http://www.yefangqingchen.com/2017/03/20/RxJava-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.yefangqingchen.com/2017/03/20/RxJava-学习笔记/</id>
    <published>2017-03-20T09:58:05.000Z</published>
    <updated>2017-03-20T10:17:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>大概就是说RxJava是Java VM上一个灵活的、使用可观测序列来组成的一个异步的、基于事件的库。<br>Observables可以发出一系列的 事件，这里的事件可以是任何东西，例如网络请求、复杂计算处理、数据库操作、文件操作等等，事件执行结束后交给 Observer/Subscriber 的回调处理。</p>
</blockquote>
<hr>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote>
<p> View 是 被观察者（Observable/Subscriber）， OnClickListener 是 观察者（Observer），setOnClickListener() 是 Subscrib。</p>
</blockquote>
<ul>
<li>Observer/Subscriber : 事件的消费者</li>
<li>Observable : 事件的产生者</li>
<li>Subscrib : 用于关联消费者和生产者</li>
</ul>
<p><img src="http://omsqy2wls.bkt.clouddn.com/WechatIMG2.jpeg" alt="此处输入图片的描述"></p>
<ul>
<li>onNext() : Observable调用这个方法发送数据，Observer中接受数据</li>
<li>onCompleted() : 在事件处理过程中出异常时触发，队列自动终止不在执行其他方法</li>
<li>onError() : 在事件处理过程中出异常时触发，队列自动终止不在执行其他方法</li>
</ul>
<blockquote>
<p>注意:onCompleted()和onError()在队列中调用了其中一个，就不应该再调用另一个</p>
</blockquote>
<a id="more"></a>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*******************观察者***************************/</span></div><div class="line"></div><div class="line"><span class="comment">//观察者1</span></div><div class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onComplete: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onError: "</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onNext: "</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//观察者2</span></div><div class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">         <span class="comment">//onStart(): 这是 Subscriber 增加的方法,这是一个可选方法，默认情况下它的实现为空</span></div><div class="line">          <span class="comment">//它会在 subscribe 刚开始，而事件还未发送之前被调用</span></div><div class="line">     &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onComplete: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onError: "</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onNext: "</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/*********************被观察者***********************/</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  写法一</div><div class="line">     *      执行结果：</div><div class="line">     *          onNext: 1</div><div class="line">     *          onNext: 2</div><div class="line">     *          onNext: 3</div><div class="line">     *          onComplete:</div><div class="line">     */</div><div class="line">Observable&lt;String&gt; observable1 = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">        subscriber.onNext(<span class="string">"1"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"2"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"3"</span>);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">observable1.subscribe(observer);</div><div class="line"></div><div class="line"></div><div class="line">----------------------------------------------------------------</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  写法二</div><div class="line">     *      执行结果：</div><div class="line">     *          onNext: 1</div><div class="line">     *          onNext: 2</div><div class="line">     *          onNext: 3</div><div class="line">     *          onComplete:</div><div class="line">     */</div><div class="line">Observable observable2 = Observable.just(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>);</div><div class="line">observable2.subscribe(observer);</div><div class="line"></div><div class="line">----------------------------------------------------------------</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  写法三</div><div class="line">     *      执行结果：</div><div class="line">     *          onNext: 1</div><div class="line">     *          onNext: 2</div><div class="line">     *          onNext: 3</div><div class="line">     *          onComplete:</div><div class="line">     */</div><div class="line">String[] words = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</div><div class="line">Observable observable3 = Observable.from(words);</div><div class="line">observable3.subscribe(observer);</div><div class="line">----------------------------------------------------------------</div><div class="line"></div><div class="line">    <span class="comment">/********************************简易写法**************************************/</span></div><div class="line"></div><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">    .subscribeOn(Schedulers.io()) <span class="comment">// 指定 subscribe() 发生在 IO 线程</span></div><div class="line">    .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 指定 Subscriber 的回调发生在主线程</span></div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**************打印数组或List集合*******************/</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  执行结果：</div><div class="line">     *      onNext: 1</div><div class="line">     *      onNext: 2</div><div class="line">     *      onNext: 3</div><div class="line">     */</div><div class="line">Integer [] ints = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</div><div class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">list.add(<span class="number">1</span>);</div><div class="line">list.add(<span class="number">2</span>);</div><div class="line">list.add(<span class="number">3</span>);</div><div class="line"></div><div class="line">Observable.from(ints)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer i)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"onNext: "</span> + i);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**************从本地取图片在显示*******************/</span></div><div class="line">Observable.just(<span class="string">"images/logo.png"</span>) <span class="comment">// 输入类型 String</span></div><div class="line">    .map(<span class="keyword">new</span> Func1&lt;String, Bitmap&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(String filePath)</span> </span>&#123; <span class="comment">// 参数类型 String</span></div><div class="line">            <span class="keyword">return</span> getBitmapFromPath(filePath); <span class="comment">// 返回类型 Bitmap</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123; <span class="comment">// 参数类型 Bitmap</span></div><div class="line">            showBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h3><ul>
<li>subscribeOn(): 指定 subscribe() 所发生的线程</li>
<li>observeOn(): 指定 Subscriber 所运行在的线程</li>
</ul>
<ul>
<li>Schedulers.immediate() : 直接在当前线程运行，默认的</li>
<li>Schedulers.newThread() : 总是启用新线程，并在新线程执行操作</li>
<li>Schedulers.io() : I/O 操作（读写文件、读写数据库、网络信息交互等），无数量上限，可重用空闲线程</li>
<li>AndroidSchedulers.mainThread() : 在 Android 主线程运行</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**************从本地取图片在显示*******************/</span></div><div class="line">Observable.create(<span class="keyword">new</span> OnSubscribe&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Drawable&gt; subscriber)</span> </span>&#123;</div><div class="line">        Drawable drawable = getTheme().getDrawable(drawableRes));</div><div class="line">        subscriber.onNext(drawable);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">.subscribeOn(Schedulers.io()) <span class="comment">// 指定 subscribe() 发生在 IO 线程</span></div><div class="line">.observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 指定 Subscriber 的回调发生在主线程</span></div><div class="line">.subscribe(<span class="keyword">new</span> Observer&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">        imageView.setImageDrawable(drawable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>参考链接</p>
</blockquote>
<p><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">http://gank.io/post/560e15be2dca930e00da1083</a><br><a href="http://blog.csdn.net/yyh352091626/article/details/53304728" target="_blank" rel="external">http://blog.csdn.net/yyh352091626/article/details/53304728</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;大概就是说RxJava是Java VM上一个灵活的、使用可观测序列来组成的一个异步的、基于事件的库。&lt;br&gt;Observables可以发出一系列的 事件，这里的事件可以是任何东西，例如网络请求、复杂计算处理、数据库操作、文件操作等等，事件执行结束后交给 Observer/Subscriber 的回调处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; View 是 被观察者（Observable/Subscriber）， OnClickListener 是 观察者（Observer），setOnClickListener() 是 Subscrib。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Observer/Subscriber : 事件的消费者&lt;/li&gt;
&lt;li&gt;Observable : 事件的产生者&lt;/li&gt;
&lt;li&gt;Subscrib : 用于关联消费者和生产者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://omsqy2wls.bkt.clouddn.com/WechatIMG2.jpeg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;onNext() : Observable调用这个方法发送数据，Observer中接受数据&lt;/li&gt;
&lt;li&gt;onCompleted() : 在事件处理过程中出异常时触发，队列自动终止不在执行其他方法&lt;/li&gt;
&lt;li&gt;onError() : 在事件处理过程中出异常时触发，队列自动终止不在执行其他方法&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意:onCompleted()和onError()在队列中调用了其中一个，就不应该再调用另一个&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.yefangqingchen.com/categories/Android/"/>
    
      <category term="RxJava" scheme="http://www.yefangqingchen.com/categories/Android/RxJava/"/>
    
    
      <category term="Android" scheme="http://www.yefangqingchen.com/tags/Android/"/>
    
      <category term="RxJava" scheme="http://www.yefangqingchen.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android 配置以及使用 Protobuf</title>
    <link href="http://www.yefangqingchen.com/2017/03/14/Android%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8Protobuf/"/>
    <id>http://www.yefangqingchen.com/2017/03/14/Android配置以及使用Protobuf/</id>
    <published>2017-03-14T10:32:31.000Z</published>
    <updated>2017-03-14T10:42:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>因为最近公司要求在新的APP版本上和后台通信使用protobuf，因为我之前也没有听说过这是啥，所以在使用的过程中也记录一下使用的过程。<br>至于Protobuf是什么有什么优点缺点就不写了，google一下一大堆。这里记一下笔记。</p>
</blockquote>
<h2 id="Protobuf-配置"><a href="#Protobuf-配置" class="headerlink" title="Protobuf 配置"></a>Protobuf 配置</h2><blockquote>
<p>现在Android开发基本都是用 Android Studio 开始，所以我们只需要在Android Studio里面配置下就可以使用了。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-打开project的build-gradle文件"><a href="#1-打开project的build-gradle文件" class="headerlink" title="1. 打开project的build.gradle文件"></a>1. 打开project的build.gradle文件</h2><p><img src="http://omsqy2wls.bkt.clouddn.com/blog_protobuf_1.jpeg" alt="此处输入图片的描述"></p>
<blockquote>
<p>添加代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        mavenCentral()<span class="comment">//添加此行</span></div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.2.3'</span></div><div class="line">        classpath <span class="string">'com.google.protobuf:protobuf-gradle-plugin:0.8.0'</span><span class="comment">//添加此行</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-打开在app的build-gradle中配置"><a href="#2-打开在app的build-gradle中配置" class="headerlink" title="2. 打开在app的build.gradle中配置"></a>2. 打开在app的build.gradle中配置</h2><p><img src="http://omsqy2wls.bkt.clouddn.com/WechatIMG5.jpeg" alt="此处输入图片的描述"></p>
<blockquote>
<p>添加代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'com.google.protobuf'</span><span class="comment">//添加此行</span></div><div class="line"></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">25</span></div><div class="line">    buildToolsVersion <span class="string">"25.0.2"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"rock.example.com"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">25</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    dataBinding &#123;</div><div class="line">        enabled = <span class="keyword">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//添加此段</span></div><div class="line">protobuf &#123;</div><div class="line">    <span class="comment">//配置protoc编译器</span></div><div class="line">    protoc &#123;</div><div class="line">        artifact = <span class="string">'com.google.protobuf:protoc:3.0.0-alpha-3'</span></div><div class="line">    &#125;</div><div class="line">    plugins &#123;</div><div class="line">        javalite &#123;</div><div class="line">            artifact = <span class="string">'com.google.protobuf:protoc-gen-javalite:3.0.0'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//这里配置生成目录，编译后会在build的目录下生成对应的java文件</span></div><div class="line">    generateProtoTasks &#123;</div><div class="line">        all().each &#123; task -&gt;</div><div class="line">            task.plugins &#123;</div><div class="line">                javalite &#123;&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>,</span></span></div><div class="line">            include: [<span class="string">'*.jar'</span>])</div><div class="line">    <span class="title">androidTestCompile</span><span class="params">(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></div><div class="line">        exclude group: <span class="string">'com.android.support'</span>, <span class="keyword">module</span>: <span class="string">'support-annotations'</span></div><div class="line">    &#125;)</div><div class="line">    compile 'com.android.support:appcompat-v7:25.2.0'</div><div class="line">    compile 'com.android.support:design:25.2.0'</div><div class="line">    testCompile 'junit:junit:4.12'</div><div class="line">    compile 'com.google.protobuf:protobuf-lite:3.0.0'<span class="comment">//添加此行</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-app-main目录下创建proto目录，存放-proto文件"><a href="#3-app-main目录下创建proto目录，存放-proto文件" class="headerlink" title="3. app/main目录下创建proto目录，存放.proto文件"></a>3. app/main目录下创建proto目录，存放.proto文件</h2><p><img src="http://omsqy2wls.bkt.clouddn.com/WechatIMG6.jpeg" alt="此处输入图片的描述"></p>
<blockquote>
<p>创建.proto文件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//proto的版本</span></div><div class="line">syntax = <span class="string">"proto3"</span>;</div><div class="line"></div><div class="line"><span class="comment">//如果设置生成的Java文件也将会自动存放到指定输出目录下的rock.example.com.model目录中。</span></div><div class="line"><span class="comment">//如果没有设置，Java的包名则为package关键字指定的名称</span></div><div class="line">option java_package = <span class="string">"rock.example.com.model"</span>;</div><div class="line"><span class="comment">//如果设置生成的java文件名为UserProto，如果没有设置默认名为.proto文件名</span></div><div class="line">option java_outer_classname = <span class="string">"UserProto"</span>;</div><div class="line"></div><div class="line">message UserData&#123;</div><div class="line">	int64 id = <span class="number">1</span>;</div><div class="line">	string name = <span class="number">2</span>;</div><div class="line">	string msg = <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-生成对应文件"><a href="#4-生成对应文件" class="headerlink" title="4. 生成对应文件"></a>4. 生成对应文件</h2><ol>
<li>Build - &gt; Clean Project</li>
<li>Build - &gt; Rebulid Project</li>
</ol>
<blockquote>
<p> 构建完了之后可以在工程的 app/build/generated/source/proto/debug/javalite/中找到UserProto</p>
</blockquote>
<p><img src="http://omsqy2wls.bkt.clouddn.com/blog_protobuf_4.jpeg" alt="此处输入图片的描述"></p>
<h2 id="5-请求网络填充UserProto并使用"><a href="#5-请求网络填充UserProto并使用" class="headerlink" title="5. 请求网络填充UserProto并使用"></a>5. 请求网络填充UserProto并使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">liteHttp.execute(<span class="keyword">new</span> ByteString(url).setHttpListener(<span class="keyword">new</span> HttpListener&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(ByteString data, Response&lt;ByteString&gt; response)</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        UserProto.UserData userProto = UserProto.UserData.parseFrom(data);</div><div class="line"></div><div class="line">        System.out.println(userProto.getName());</div><div class="line">        System.out.println(userProto.getMsg());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">));</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>参考链接</p>
</blockquote>
<p><a href="https://taozj.org/201609/learn-note-of-protobuf.html" target="_blank" rel="external">https://taozj.org/201609/learn-note-of-protobuf.html</a><br><a href="https://github.com/google/protobuf" target="_blank" rel="external">https://github.com/google/protobuf</a><br><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;因为最近公司要求在新的APP版本上和后台通信使用protobuf，因为我之前也没有听说过这是啥，所以在使用的过程中也记录一下使用的过程。&lt;br&gt;至于Protobuf是什么有什么优点缺点就不写了，google一下一大堆。这里记一下笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Protobuf-配置&quot;&gt;&lt;a href=&quot;#Protobuf-配置&quot; class=&quot;headerlink&quot; title=&quot;Protobuf 配置&quot;&gt;&lt;/a&gt;Protobuf 配置&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;现在Android开发基本都是用 Android Studio 开始，所以我们只需要在Android Studio里面配置下就可以使用了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.yefangqingchen.com/categories/Android/"/>
    
      <category term="Android Studio" scheme="http://www.yefangqingchen.com/categories/Android/Android-Studio/"/>
    
      <category term="Protobuf" scheme="http://www.yefangqingchen.com/categories/Android/Android-Studio/Protobuf/"/>
    
    
      <category term="Android" scheme="http://www.yefangqingchen.com/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://www.yefangqingchen.com/tags/Android-Studio/"/>
    
      <category term="Protobuf" scheme="http://www.yefangqingchen.com/tags/Protobuf/"/>
    
  </entry>
  
  <entry>
    <title>为什么现在才选择写博客</title>
    <link href="http://www.yefangqingchen.com/2017/03/08/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%8E%B0%E5%9C%A8%E6%89%8D%E9%80%89%E6%8B%A9%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.yefangqingchen.com/2017/03/08/为什么现在才选择写博客/</id>
    <published>2017-03-08T08:24:13.000Z</published>
    <updated>2017-03-08T10:07:32.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>追随前辈们的脚步，工作几年的我也开始决定写博客。很早就萌发了要自己搭建站点写博客的想法，记录下生活、总结下技术难点等等，但是因为自己的拖延症、怕麻烦就拖到了现在。还有就是因为自己觉得自己一直没有从始到终都是自己写的开源项目、或者控件工具之类的。不想把别人的东西复制过来改改，然后在上传到自己的github。我觉得这样没什么意思。</p>
<p>但是为什么现在又决定开始写呢 ？ </p>
<a id="more"></a>
<p>因为工作几年后开始发现自己的技术增长的太慢，发现遇到了瓶颈，仿佛又回到了几年前的状态变得迷茫不知道该怎么办。</p>
<p>作为从事IT行业的我来说，生活在这个节奏快、人心浮躁、知识日月更新的城市和时代只有每天让自己忙碌和进步才能让自己感到不心慌、不被淘汰。所以现在我才决定要开始写博客。</p>
<p>现在打算重新把基础书籍复习一次，把以往和现在再工作中学到的知识、难点记录起来。然后在自己慢慢做一个开源的项目。</p>
<p>并且写博客确实有很多好处：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>让自己变得更加自信，让自己变的冷静下来</li>
<li>发布日记，杂文，呈现所想，将其暴露在外，这能让错误和正确都更加明显，以便改正和巩固，帮助自己很好的认识自己。</li>
</ul>
</blockquote>
<p>感想</p>
<blockquote>
<ul>
<li>知道的越多懂得越多，越是能能发现自己有多么渺小和无知。多去听听别人的声音，可以知道人外有人，山外有山，也能衡量自己的实力。不妄自菲薄，也不骄傲自满。保持学习，努力，坚持。</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;追随前辈们的脚步，工作几年的我也开始决定写博客。很早就萌发了要自己搭建站点写博客的想法，记录下生活、总结下技术难点等等，但是因为自己的拖延症、怕麻烦就拖到了现在。还有就是因为自己觉得自己一直没有从始到终都是自己写的开源项目、或者控件工具之类的。不想把别人的东西复制过来改改，然后在上传到自己的github。我觉得这样没什么意思。&lt;/p&gt;
&lt;p&gt;但是为什么现在又决定开始写呢 ？ &lt;/p&gt;
    
    </summary>
    
      <category term="心情杂记" scheme="http://www.yefangqingchen.com/categories/%E5%BF%83%E6%83%85%E6%9D%82%E8%AE%B0/"/>
    
      <category term="其他" scheme="http://www.yefangqingchen.com/categories/%E5%BF%83%E6%83%85%E6%9D%82%E8%AE%B0/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="心情杂记" scheme="http://www.yefangqingchen.com/tags/%E5%BF%83%E6%83%85%E6%9D%82%E8%AE%B0/"/>
    
      <category term="其他" scheme="http://www.yefangqingchen.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.yefangqingchen.com/2017/03/07/hello-world/"/>
    <id>http://www.yefangqingchen.com/2017/03/07/hello-world/</id>
    <published>2017-03-07T01:52:38.000Z</published>
    <updated>2017-03-08T10:07:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://www.yefangqingchen.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://www.yefangqingchen.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
